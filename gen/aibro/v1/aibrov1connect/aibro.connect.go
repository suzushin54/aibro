// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aibro/v1/aibro.proto

package aibrov1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/suzushin54/aibro/gen/aibro/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AIBroServiceName is the fully-qualified name of the AIBroService service.
	AIBroServiceName = "aibro.v1.AIBroService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AIBroServiceChatStreamProcedure is the fully-qualified name of the AIBroService's ChatStream RPC.
	AIBroServiceChatStreamProcedure = "/aibro.v1.AIBroService/ChatStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aIBroServiceServiceDescriptor          = v1.File_aibro_v1_aibro_proto.Services().ByName("AIBroService")
	aIBroServiceChatStreamMethodDescriptor = aIBroServiceServiceDescriptor.Methods().ByName("ChatStream")
)

// AIBroServiceClient is a client for the aibro.v1.AIBroService service.
type AIBroServiceClient interface {
	ChatStream(context.Context) *connect.BidiStreamForClient[v1.ChatStreamRequest, v1.ChatStreamResponse]
}

// NewAIBroServiceClient constructs a client for the aibro.v1.AIBroService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAIBroServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AIBroServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aIBroServiceClient{
		chatStream: connect.NewClient[v1.ChatStreamRequest, v1.ChatStreamResponse](
			httpClient,
			baseURL+AIBroServiceChatStreamProcedure,
			connect.WithSchema(aIBroServiceChatStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aIBroServiceClient implements AIBroServiceClient.
type aIBroServiceClient struct {
	chatStream *connect.Client[v1.ChatStreamRequest, v1.ChatStreamResponse]
}

// ChatStream calls aibro.v1.AIBroService.ChatStream.
func (c *aIBroServiceClient) ChatStream(ctx context.Context) *connect.BidiStreamForClient[v1.ChatStreamRequest, v1.ChatStreamResponse] {
	return c.chatStream.CallBidiStream(ctx)
}

// AIBroServiceHandler is an implementation of the aibro.v1.AIBroService service.
type AIBroServiceHandler interface {
	ChatStream(context.Context, *connect.BidiStream[v1.ChatStreamRequest, v1.ChatStreamResponse]) error
}

// NewAIBroServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAIBroServiceHandler(svc AIBroServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aIBroServiceChatStreamHandler := connect.NewBidiStreamHandler(
		AIBroServiceChatStreamProcedure,
		svc.ChatStream,
		connect.WithSchema(aIBroServiceChatStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/aibro.v1.AIBroService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AIBroServiceChatStreamProcedure:
			aIBroServiceChatStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAIBroServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAIBroServiceHandler struct{}

func (UnimplementedAIBroServiceHandler) ChatStream(context.Context, *connect.BidiStream[v1.ChatStreamRequest, v1.ChatStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("aibro.v1.AIBroService.ChatStream is not implemented"))
}
